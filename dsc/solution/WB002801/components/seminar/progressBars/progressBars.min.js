'use strict';

module.exports = {
    props: ['progressBars'],
    data: function data() {
        return {
            isInit: false
        };
    },
    computed: {
        isMobile: function isMobile() {
            return store.state.isMobile;
        }
    },
    methods: {
        scrollHandler: _.throttle(function () {
            if (!this.isInit) {
                var progressBarsPos = $(this.$refs.progressBars).offset().top;
                var distance = progressBarsPos - $(window).height();
                var windowPos = $(window).scrollTop();

                if (windowPos >= distance) {
                    this.initComponent();
                    this.isInit = true;
                }
            }
        }, 100),
        initComponent: function initComponent() {
            setTimeout(function () {
                $('.js-barGroup').each(function (barIdx) {
                    $(this).find('.js-bar').removeClass('disabled').each(function (itemIdx) {
                        var percentage = this.dataset.percentage;
                        new CountUp('bar'.concat(barIdx + 1, '-').concat(itemIdx + 1), 0, percentage).start();
                    });
                });
            }, 100);
        },
        setBarWidth: function setBarWidth(value) {
            var percentage;

            if (this.isMobile && value < 23) {
                percentage = 23;
            } else if (value < 14) {
                percentage = 14;
            } else {
                percentage = value;
            }

            return ''.concat(percentage, '%');
        }
    },
    mounted: function mounted() {
        this.scrollHandler();
        window.addEventListener('scroll', this.scrollHandler);
    },
    beforeDestroy: function beforeDestroy() {
        window.removeEventListener('scroll', this.scrollHandler);
    }
};